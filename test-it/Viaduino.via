// A very preliminary test that uses VI and Instruction reflection 
// to generate source for building a static linked version of the run time 
// instructions like InstructionType require the VIREO_INSTRUCTION_REFLECTION flag


define (HelloWorld dv(.VirtualInstrument (
    c(
        e(dv(.String "Hello, Wei") variable1)
        e(dv(.Int32  505) variable2)
        e(dv(.Boolean  true) variable3)
        e(dv(.Boolean  false) variable4)
        e(dv(.Boolean  false) v7)
        e(dv(.Boolean  false) v8)
        e(dv(.Boolean  false) v9)
    )
    clump (
        Add(variable2 variable2 variable2)
        Println(variable1)
    )
    clump (
        Println(variable1)
        Println(variable1)
    )
) ) )

define (Converter dv(.VirtualInstrument (
    c(
        e(.Type     dsType)
        e(.Int32    count)
        e(.Int32    index)
        e(.Int32    zero)
        e(.Type     eltType)
        e(.String   typeName)  
        e(.String   eltName)  
        e(.String   eltValue) 
        e(a(.VIClump *) clumps) // alias to the array of clumps
        e(.VIClump clump)
        e(.Instruction inst)
        e(.Type  instructionType)
        e(.Type  parameterListType)
        e(.String internalName)
        
        // For iterating through parameter types
        e(.Int32    count2)
        e(.Int32    index2)
        e(.Type     argType)

    )
    clump (
        ArrayElementType(HelloWorld.DataSpace dsType)
        
        // Print the dataspace type
    
        TypeSubElementCount(dsType count)
        Printf("//-------------------------\n")
        Printf("class DST_HelloWorld {  \n" )
        Perch(0)
            TypeGetSubElement(dsType index eltType)
            TypeGetName(eltType typeName) 
            TypeGetElementName(eltType eltName) 
            Printf("  VT%s _%s;\n" typeName eltName)
            Add(index 1 index)
        BranchIfLT(0 index count)
        Printf("};")
        
        // Print the dataspace initializer

        Init(index)
        Printf("//-------------------------\n")
        Printf("DST_HelloWorld  ds = {  \n" )
        Perch(1)
            TypeGetSubElement(dsType index eltType)
            DefaultValueToString(eltType eltValue)
            Printf("  %s,\n" eltValue)
            Add(index 1 index)
        BranchIfLT(1 index count)
        Printf("};")

        // Print clump initializer

        Copy(HelloWorld.Clumps clumps)
        ArrayLength(clumps count)
        Printf("//Number of clumps %s\n" count)        
        Printf("//-------------------------\n")
        ArrayIndexElt(clumps 0 clump)        
        InstructionType(clump.CodeStart instructionType internalName)
            
            Printf("Instructions inst = {\n" clump.CodeStart)     
            TypeGetName(instructionType typeName)
            Printf("   _I1(%s" internalName)
            
            
            // The instruction type is a pointer.
            // To get acces to the pointer's description get its sub element
            TypeGetSubElement(instructionType 0 parameterListType)
            TypeSubElementCount(parameterListType count2)
            Init(index2)
            
            // Loop through all arguments 
            Perch(2)
                TypeGetSubElement(parameterListType index2 argType)
                TypeGetName(argType typeName) 
                Printf("%s" typeName)
                Printf(",")
                Add(index2 1 index2)
            BranchIfLT(2 index2 count2)
  

        Printf(")\n" internalName)
        Printf("};\n" clump.CodeStart)            
    )
) ) )


enqueue (Converter)
