// Array dimensions
// Simple base cases for parameterized dimensions
define (t1_0 a(.Int32 $0))
define (t1_1 a(.Int32 $1))

// Hard to imagine a template with 255 parameters, but...
define (t1_254 a(.Int32 $254))
define (t1_255 a(.Int32 $255))

// (Line nnn HardError "Invalid array dimension '$256'.")
//define (t1_256 a(.Int32 $256))

// BitBlock size
define(bb_0  c(e(bb($1 UInt))))
define(bb_255  c(e(bb($255 UInt))))

// TODO BitBlock encodings, very meta, need enums


define (t1 a(.Int32 $1))
//define (t2 a($1 $1))
//define (t3 a($1 $2))

/*
define (t1_Int .t1<.Int32>)
define (t1_Double .t1<.Double>)

define (t2_Int .t1<.Int32>)
define (t2_Double .t1<.Double>)
*/

define (Test dv(.VirtualInstrument (
 c(
    e(.Type                 vType)
    e(a(.Double * * *)      a4)
    e(a(.Double 1 2 3)      a5)
    e(a(.Double -1 -2 -3)   a6)
  ) 
  clump(1 
    // Array dimensions
    //----
    TypeOf(t1_0 vType) 
    Println(vType)
    TypeBaseType(vType vType)
    Println(vType)    
    
    TypeOf(t1_1 vType) 
    Println(vType)
    TypeBaseType(vType vType)
    Println(vType)    

    TypeOf(t1_254 vType) 
    Println(vType)
    TypeBaseType(vType vType)
    Println(vType)    

    TypeOf(t1_255 vType) 
    Println(vType)
    TypeBaseType(vType vType)
    Println(vType)    

    // Bit Blocks
    TypeOf(bb_0 vType) 
    Println(vType)
    TypeBaseType(vType vType)
    Println(vType)    

    TypeOf(bb_255 vType) 
    Println(vType)
    TypeBaseType(vType vType)
    Println(vType)    

    
    //----
 //   TypeOf(t2 vType) 
  //  Println(vType)
   )
 ) ) )
enqueue (Test)
